import {useEffect, useContext} from 'react'

import useFetch from 'hooks/useFetch'
import {CurrentUserContext} from 'contexts/currentUser'
import useLocalStorage from 'hooks/useLocalStorage'

//Fetch the current user for the token saved in the local storage and save this data
const CurrentUserChecker = ({children}) => {
  const [, setCurrentUserState] = useContext(CurrentUserContext)
  const [{response}, doFetch] = useFetch('/user')//get current user
  const [token] = useLocalStorage('token') //

  //In this effect, during initialization, we know about the presence of a token. Therefore, we check for its presence and return the state of the current user for login
  useEffect(() => {
    //if user did not login
    if (!token) {
      setCurrentUserState(state => ({
        ...state,
        isLoggedIn: false
      }))
      return
    }

    // if user is logged in
    doFetch()
    setCurrentUserState(state => ({
      //our request is begining, all our components know about the loading of our current user
      ...state,
      isLoading: true
    }))
  }, [doFetch, setCurrentUserState, token])

  // Effect that monitors the response from the server
  useEffect(() => {
    if (!response) {
      return
    }

    setCurrentUserState(state => ({
      ...state,
      isLoggedIn: true,
      isLoading: false,
      currentUser: response.user
    }))
  }, [response, setCurrentUserState])
  return children
}

export default CurrentUserChecker
